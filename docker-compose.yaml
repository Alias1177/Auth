services:
  auth-app:
    container_name: auth-app
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - monitoring-network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "admin", "-d", "mydb" ]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - monitoring-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - monitoring-network

  # PostgreSQL экспортер
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://admin:secret@postgres:5432/mydb?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - monitoring-network

  # Redis экспортер
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      REDIS_ADDR: redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - monitoring-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    environment:
      - GRAFANA=${{ GRAFANA }}
    ports:
      - "9092:9090"  # Используем 9091 для внешнего доступа, чтобы избежать конфликта портов
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts_rules.yml:/etc/prometheus/alerts_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--enable-feature=remote-write-receiver'  # Включаем возможность получать remote_write запросы
    networks:
      - monitoring-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  monitoring-network:
    driver: bridge