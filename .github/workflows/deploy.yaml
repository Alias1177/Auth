name: Deploy Auth CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/home/Auth"

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/Auth
            
            # Create .env file with better error handling
            echo "Creating .env file..."
            
            # Check if secret exists
            if [ -z "${{ secrets.ENV_FILE_CONTENTS }}" ]; then
              echo "ERROR: ENV_FILE_CONTENTS secret is empty or not set!"
              echo "Please configure the ENV_FILE_CONTENTS secret in GitHub repository settings."
              exit 1
            fi
            
            # Create .env file
            echo "=== Creating .env file ==="
            echo "${{ secrets.ENV_FILE_CONTENTS }}" > .env
            chmod 644 .env
            echo ".env file created"
            
            # Verify .env file was created and has content
            if [ ! -s .env ]; then
              echo "ERROR: .env file is empty or not created!"
              echo "This might be due to empty ENV_FILE_CONTENTS secret or permission issues."
              exit 1
            fi
            
            echo "✅ .env file created successfully"
            echo "File size: $(wc -c < .env) bytes"
            
            # Check if required environment variables are present
            if ! grep -q "DATABASE_DSN=" .env; then
              echo "ERROR: DATABASE_DSN not found in .env file!"
              exit 1
            fi
            
            # Verify go.mod exists and is valid
            if [ ! -f "go.mod" ]; then
              echo "ERROR: go.mod file not found!"
              exit 1
            fi
            
            # Check for any prometheus imports that might cause issues
            if grep -r "prometheus" . --include="*.go" --exclude-dir=vendor; then
              echo "WARNING: Found prometheus imports in Go files"
              echo "This might cause build issues if dependencies are missing"
            fi
            
            # Проверяем существование файлов docker-compose
            if [ ! -f "docker-compose.yaml" ]; then
              echo "docker-compose.yaml not found!"
              ls -la
              exit 1
            fi
            
            # Используем docker-compose вместо docker compose, если доступен
            if command -v docker-compose &> /dev/null; then
              # Stop all running containers and remove orphans
              docker-compose down --remove-orphans
              
              # Clean up Docker cache to avoid stale builds
              docker system prune -f
              docker builder prune -f
            
              # Build the containers
              docker-compose build --no-cache auth-service
            
              # Run migrations
              echo "Running database migrations..."
              if ! docker-compose run --rm auth-service ./auth-app -migrate; then
                echo "WARNING: Migration failed, but continuing deployment..."
              fi
            
              # Start containers
              docker-compose up -d
            
              # Check status
              sleep 10
              docker-compose ps
              
              # Check if auth-service is healthy
              if ! docker-compose ps | grep -q "auth-service.*Up.*healthy"; then
                echo "WARNING: auth-service is not healthy, checking logs..."
                docker-compose logs auth-service
              else
                echo "✅ auth-service is healthy and running"
              fi
              
              # Final status check
              echo "=== Final Service Status ==="
              docker-compose ps
              echo "==========================="
            else
              # Попытаемся использовать docker compose (новый синтаксис)
              # Stop all running containers and remove orphans
              docker compose down --remove-orphans
              
              # Clean up Docker cache to avoid stale builds
              docker system prune -f
              docker builder prune -f
            
              # Build the containers
              docker compose build --no-cache auth-service
            
              # Run migrations
              echo "Running database migrations..."
              if ! docker compose run --rm auth-service ./auth-app -migrate; then
                echo "WARNING: Migration failed, but continuing deployment..."
              fi
            
              # Start containers
              docker compose up -d
            
              # Check status
              sleep 10
              docker compose ps
              
              # Check if auth-service is healthy
              if ! docker compose ps | grep -q "auth-service.*Up.*healthy"; then
                echo "WARNING: auth-service is not healthy, checking logs..."
                docker compose logs auth-service
              else
                echo "✅ auth-service is healthy and running"
              fi
              
              # Final status check
              echo "=== Final Service Status ==="
              docker compose ps
              echo "==========================="
            fi